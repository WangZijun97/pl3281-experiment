{"version":3,"sources":["Screen.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["Screen","props","state","circleStyle","display","marginLeft","marginTop","borderColor","buttonStyle","box","React","createRef","circle","createCircle","bind","handleScreenClick","removeCircle","showButton","coords","this","current","getBoundingClientRect","setState","Math","random","width","height","setTimeout","delay","e","circleCoords","circleCenter","x","y","window","scrollY","dist","pow","pageX","pageY","onMouseDown","round","className","onMouseMove","ref","style","onClick","Component","Game","DEFAULT_INPUT","records","timeOnScreen","inputValue","_onMouseDown","_onMouseMove","_handleChange","_handleSubmit","result","push","target","value","isNaN","type","onChange","length","filter","reduce","map","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6OAkHeA,EA/Gf,kDACI,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,YAAa,CACTC,QAAS,OACTC,WAAY,EACZC,UAAW,EACXC,YAAa,SAEjBC,YAAa,CACTJ,QAAS,iBAIjB,EAAKK,IAAMC,IAAMC,YACjB,EAAKC,OAASF,IAAMC,YAEpB,EAAKE,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,kBAAoB,EAAKA,kBAAkBD,KAAvB,gBACzB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBACpB,EAAKG,WAAa,EAAKA,WAAWH,KAAhB,gBArBH,EADvB,2DAyBoB,IAAD,OACLI,EAASC,KAAKV,IAAIW,QAAQC,wBAEhCF,KAAKG,SAAS,CACVnB,YAAa,CACTC,QAAS,eACTC,WAAYkB,KAAKC,UAAUN,EAAOO,MAAM,IAAI,GAC5CnB,UAAWiB,KAAKC,UAAUN,EAAOQ,OAAO,IAAI,IAEhDlB,YAAa,CACTJ,QAAS,UAIjBuB,YAAW,kBAAM,EAAKX,iBAAgBG,KAAKlB,MAAM2B,SAvCzD,qCA2CoB,IAAD,OACXT,KAAKG,SAAS,CACVnB,YAAa,CACTC,QAAS,UAIjBuB,YAAW,kBAAM,EAAKV,eAAc,OAlD5C,mCAuDQE,KAAKG,SAAS,CACVd,YAAa,CACTJ,QAAS,oBAzDzB,wCA8DsByB,GACd,GAAuC,SAAnCV,KAAKjB,MAAMM,YAAYJ,QAI3B,GAAuC,SAAnCe,KAAKjB,MAAMC,YAAYC,QAA3B,CAIA,IAAM0B,EAAeX,KAAKP,OAAOQ,QAAQC,wBACnCU,EAAe,CAACD,EAAaE,EAAIF,EAAaL,MAAM,EAAGK,EAAaG,EAAIH,EAAaJ,OAAO,EAAIQ,OAAOC,SAIvGC,EAAOb,KAAKc,IAAId,KAAKc,IAAIR,EAAES,MAAMP,EAAa,GAAG,GAAKR,KAAKc,IAAIR,EAAEU,MAAMR,EAAa,GAAG,GAAG,IAEhGZ,KAAKlB,MAAMuC,YAAYjB,KAAKkB,MAAa,IAAPL,GAAY,KAE9CjB,KAAKG,SAAS,CACVnB,YAAa,CACTC,QAAS,OACTC,WAAY,GACZC,UAAW,WAhBfa,KAAKlB,MAAMuC,YAAY,UApEnC,+BA6FQ,OACQ,6BACI,yBACIE,UAAU,OACVF,YAAarB,KAAKJ,kBAClB4B,YAAaxB,KAAKlB,MAAM0C,YACxBC,IAAKzB,KAAKV,KAEV,0BAAMiC,UAAU,SAASG,MAAO1B,KAAKjB,MAAMC,YAAayC,IAAKzB,KAAKP,SAClE,yBAAK8B,UAAU,aACX,4BAAQA,UAAU,SAASG,MAAO1B,KAAKjB,MAAMM,YAAasC,QAAS3B,KAAKN,cAAxE,sBAvG5B,GAA4BH,IAAMqC,WCiFnBC,EAhFf,kDACI,WAAY/C,GAAQ,IAAD,8BACf,cAAMA,IAEDgD,cAAgB,0BAErB,EAAK/C,MAAQ,CACT8B,EAAE,EACFC,EAAE,EACFiB,QAAS,GACTC,aAAc,KACdC,WAAY,EAAKH,eAErB,EAAKI,aAAe,EAAKA,aAAavC,KAAlB,gBACpB,EAAKwC,aAAe,EAAKA,aAAaxC,KAAlB,gBACpB,EAAKyC,cAAgB,EAAKA,cAAczC,KAAnB,gBACrB,EAAK0C,cAAgB,EAAKA,cAAc1C,KAAnB,gBAfN,EADvB,yDAmBiBe,GACTV,KAAKG,SAAS,CACVU,EAAGH,EAAES,MACLL,EAAGJ,EAAEU,UAtBjB,mCA0BiBkB,GAETtC,KAAKjB,MAAMgD,QAAQQ,KAAKD,GACxBtC,KAAKG,SAAS,CAAC4B,QAAS/B,KAAKjB,MAAMgD,YA7B3C,oCAgCkBrB,GACVV,KAAKG,SAAS,CAAC8B,WAAYvB,EAAE8B,OAAOC,UAjC5C,oCAoCkB/B,GAENgC,MAAM1C,KAAKjB,MAAMkD,YACjBjC,KAAKG,SAAS,CAAC8B,WAAYjC,KAAKjB,MAAMiD,eAG1ChC,KAAKG,SAAS,CAAC6B,aAAchC,KAAKjB,MAAMkD,eA1ChD,+BA8CQ,OAAQ,6BACI,kBAAC,EAAD,CACIZ,YAAarB,KAAKkC,aAClBV,YAAaxB,KAAKmC,aAClB1B,MAAOT,KAAKjB,MAAMiD,eAEtB,6BACI,mIAIA,2BAAOW,KAAK,OAAOF,MAASzC,KAAKjB,MAAMkD,WAAYW,SAAY5C,KAAKoC,gBACpE,4BAAQT,QAAW3B,KAAKqC,eAAxB,gBACA,0BAAMX,MAAO,CAAC,YAAa,SAA3B,mBAAqD1B,KAAKjB,MAAMiD,aAAhE,OACA,uBAAGT,UAAU,cAAa,2BAAG,iDAAuBvB,KAAKjB,MAAMgD,QAAQc,OAAS,EACtEzC,KAAKkB,MAAMtB,KAAKjB,MAAMgD,QACnBe,QAAO,SAAAjC,GAAC,MAAgB,iBAALA,KACnBkC,QAAO,SAAClC,EAAEC,GAAH,OAASD,EAAEC,IAAG,GAAKd,KAAKjB,MAAMgD,QAAQe,QAAO,SAAAjC,GAAC,MAAgB,iBAALA,KAAegC,OAAS,KAAO,IAClG,GAEN,+CAAqB7C,KAAKjB,MAAMgD,QAAQc,OAAS,EAC3CzC,KAAKkB,MAAMtB,KAAKjB,MAAMgD,QAAQe,QAAO,SAAAjC,GAAC,MAAU,SAANA,KAAcgC,OAAS7C,KAAKjB,MAAMgD,QAAQc,OAAS,KAAK,IAClG,EAFN,OAKJ,wBAAItB,UAAU,SACTvB,KAAKjB,MAAMgD,QAAQiB,KAAI,SAAAnC,GAAC,OAAK,4BAAI,mCAASA,EAAT,iBAxE9D,GAA0BtB,IAAMqC,WCSjBqB,MATf,WACE,OACE,yBAAK1B,UAAU,kBACX,6DACA,kBAAC,EAAD,QCIY2B,QACW,cAA7BnC,OAAOoC,SAASC,UAEe,UAA7BrC,OAAOoC,SAASC,UAEhBrC,OAAOoC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.5d88e2cb.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nexport class Screen extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        \r\n        this.state = {\r\n            circleStyle: {\r\n                display: \"none\",\r\n                marginLeft: 0,\r\n                marginTop: 0,\r\n                borderColor: \"black\"\r\n            },\r\n            buttonStyle: {\r\n                display: \"inline-block\"\r\n            }\r\n        }\r\n        \r\n        this.box = React.createRef()\r\n        this.circle = React.createRef()\r\n        \r\n        this.createCircle = this.createCircle.bind(this)\r\n        this.handleScreenClick = this.handleScreenClick.bind(this)\r\n        this.removeCircle = this.removeCircle.bind(this)\r\n        this.showButton = this.showButton.bind(this)\r\n    }\r\n    \r\n    createCircle() {\r\n        const coords = this.box.current.getBoundingClientRect()\r\n        \r\n        this.setState({\r\n            circleStyle: {\r\n                display: \"inline-block\",\r\n                marginLeft: Math.random()*(coords.width-40)+10,\r\n                marginTop: Math.random()*(coords.height-40)+10\r\n            },\r\n            buttonStyle: {\r\n                display: \"none\"\r\n            }\r\n        })\r\n\r\n        setTimeout(() => this.removeCircle(), this.props.delay)\r\n        \r\n    }\r\n    \r\n    removeCircle() {\r\n        this.setState({\r\n            circleStyle: {\r\n                display: \"none\"\r\n            }\r\n        })\r\n        \r\n        setTimeout(() => this.showButton(), 400)\r\n            \r\n    }\r\n    \r\n    showButton() {\r\n        this.setState({\r\n            buttonStyle: {\r\n                display: \"inline-block\"\r\n            }\r\n        })\r\n    }\r\n    \r\n    handleScreenClick(e) {\r\n        if (this.state.buttonStyle.display !== \"none\") {\r\n            return\r\n        }\r\n        \r\n        if (this.state.circleStyle.display === \"none\") {\r\n            this.props.onMouseDown(\"Late\")\r\n            return\r\n        }\r\n        const circleCoords = this.circle.current.getBoundingClientRect()\r\n        const circleCenter = [circleCoords.x + circleCoords.width/2, circleCoords.y + circleCoords.height/2 + window.scrollY]\r\n        \r\n        //alert(\"~ \" + e.pageX + \" | \" + circleCenter + \" | \" + e.pageY + \" ~\")\r\n        \r\n        const dist = Math.pow(Math.pow(e.pageX-circleCenter[0],2) + Math.pow(e.pageY-circleCenter[1],2),0.5)\r\n        \r\n        this.props.onMouseDown(Math.round(dist * 100)/100)\r\n        \r\n        this.setState({\r\n            circleStyle: {\r\n                display: \"none\",\r\n                marginLeft: 10,\r\n                marginTop: 10\r\n            }\r\n        })\r\n    }\r\n    \r\n        \r\n    \r\n    render() {\r\n        \r\n        return (\r\n                <div>\r\n                    <div \r\n                        className=\"game\" \r\n                        onMouseDown={this.handleScreenClick} \r\n                        onMouseMove={this.props.onMouseMove}\r\n                        ref={this.box}\r\n                    >\r\n                        <span className=\"circle\" style={this.state.circleStyle} ref={this.circle}></span>\r\n                        <div className=\"buttonDiv\">\r\n                            <button className=\"button\" style={this.state.buttonStyle} onClick={this.createCircle}>Give Circle</button>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                </div>)\r\n    }\r\n}\r\n\r\nexport default Screen","import React from 'react';\r\nimport './App.css';\r\nimport Screen from './Screen.js';\r\n\r\nexport class Game extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        \r\n        this.DEFAULT_INPUT = \"Type desired delay here\"\r\n        \r\n        this.state = {\r\n            x:0,\r\n            y:0,\r\n            records: [],\r\n            timeOnScreen: 1750,\r\n            inputValue: this.DEFAULT_INPUT\r\n        }\r\n        this._onMouseDown = this._onMouseDown.bind(this)\r\n        this._onMouseMove = this._onMouseMove.bind(this)\r\n        this._handleChange = this._handleChange.bind(this)\r\n        this._handleSubmit = this._handleSubmit.bind(this)\r\n    }\r\n    \r\n    _onMouseMove(e) {\r\n        this.setState({\r\n            x: e.pageX,\r\n            y: e.pageY\r\n        })\r\n    }\r\n    \r\n    _onMouseDown(result) {\r\n\r\n        this.state.records.push(result)\r\n        this.setState({records: this.state.records})\r\n    }\r\n    \r\n    _handleChange(e) {\r\n        this.setState({inputValue: e.target.value})\r\n    }\r\n    \r\n    _handleSubmit(e) {\r\n        \r\n        if (isNaN(this.state.inputValue)) {\r\n            this.setState({inputValue: this.state.timeOnScreen})\r\n            return\r\n        }\r\n        this.setState({timeOnScreen: this.state.inputValue})\r\n    }\r\n    \r\n    render() {\r\n        return (<div> \r\n                    <Screen\r\n                        onMouseDown={this._onMouseDown}\r\n                        onMouseMove={this._onMouseMove}\r\n                        delay={this.state.timeOnScreen}\r\n                    / >\r\n                    <div>\r\n                        <p>\r\n                            {/*<span>~{this.state.x} | {this.state.y}~</span><span>~ Delay: {this.delay} ~</span>*/}\r\n                            Please click on the \"Give Circle\" button, then click on the exact center of the circle that appears.\r\n                        </p>\r\n                        <input type=\"text\" value = {this.state.inputValue} onChange = {this._handleChange}/ >\r\n                        <button onClick = {this._handleSubmit}>Change Delay</button>\r\n                        <span style={{\"font-size\": \"14px\"}}> Current Delay: {this.state.timeOnScreen} ms</span>\r\n                        <p className=\"scoreTitle\"><u><span>Score (Average: {this.state.records.length > 0 \r\n                                ? Math.round(this.state.records\r\n                                    .filter(x => typeof x == \"number\")\r\n                                    .reduce((x,y) => x+y, 0) / this.state.records.filter(x => typeof x == \"number\").length * 100) / 100\r\n                                : 0}\r\n                            </span>\r\n                            <span> | Late Rate: {this.state.records.length > 0\r\n                                ? Math.round(this.state.records.filter(x => x === \"Late\").length / this.state.records.length * 100)/100\r\n                                : 0})\r\n                            </span>\r\n                        </u></p>\r\n                        <ul className=\"score\">\r\n                            {this.state.records.map(x => (<li><span>~ {x} ~</span></li>))}\r\n                        </ul>\r\n                    </div>\r\n                    \r\n                </div>)\r\n    }\r\n}\r\n\r\nexport default Game","import React from 'react';\nimport './App.css';\nimport Game from './Game.js';\n\nfunction App() {\n  return (\n    <div className=\"App App-header\">\n        <h2> PL3281 Experiment Prototype </h2>\n        <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}